{"version":3,"sources":["assets/hero.png","components/Minter.js","index.js"],"names":["initialInfoState","connected","status","account","web3","contract","address","contractJSON","initialMintState","loading","name","amount","supply","cost","Minter","useState","info","setInfo","mintInfo","setMintInfo","console","log","init","_request","_contractJSON","a","window","ethereum","isMetaMask","request","method","accounts","chain_id","Web3","prevState","eth","Contract","abi","chain","message","getSupply","methods","maxSupply","call","result","getCost","utils","hexToNumberString","mint","send","from","updateAmount","newAmount","connectToContract","useEffect","on","location","reload","className","alt","src","Hero","total_supply","style","display","justifyContent","alignItems","disabled","onClick","width","color","textAlign","fromWei","chain_symbol","backgroundColor","String","substring","position","bottom","left","target","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a19e382a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hero.4ce4844f.png\";","import { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport contract from \"../contracts/contract.json\";\nimport Hero from \"../assets/hero.png\";\n\nconst initialInfoState = {\n  connected: false,\n  status: null,\n  account: null,\n  web3: null,\n  contract: null,\n  address: null,\n  contractJSON: null,\n};\n\nconst initialMintState = {\n  loading: false,\n  status: `Mint your ${contract.name}`,\n  amount: 1,\n  supply: \"0\",\n  cost: \"0\",\n};\n\nfunction Minter() {\n  const [info, setInfo] = useState(initialInfoState);\n  const [mintInfo, setMintInfo] = useState(initialMintState);\n\n  console.log(info);\n\n  const init = async (_request, _contractJSON) => {\n    if (window.ethereum.isMetaMask) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: _request,\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        if (networkId == _contractJSON.chain_id) {\n          let web3 = new Web3(window.ethereum);\n          setInfo((prevState) => ({\n            ...prevState,\n            connected: true,\n            status: null,\n            account: accounts[0],\n            web3: web3,\n            contract: new web3.eth.Contract(\n              _contractJSON.abi,\n              _contractJSON.address\n            ),\n            contractJSON: _contractJSON,\n          }));\n        } else {\n          setInfo(() => ({\n            ...initialInfoState,\n            status: `Change network to ${_contractJSON.chain}.`,\n          }));\n        }\n      } catch (err) {\n        console.log(err.message);\n        setInfo(() => ({\n          ...initialInfoState,\n        }));\n      }\n    } else {\n      setInfo(() => ({\n        ...initialInfoState,\n        status: \"Please install metamask.\",\n      }));\n    }\n  };\n\n  const initListeners = () => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", () => {\n        window.location.reload();\n      });\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n    }\n  };\n\n  const getSupply = async () => {\n    \n    // const params = {\n    //   to: info.contractJSON.address,\n    //   from: info.account,\n    //   data: info.contract.methods.maxSupply().encodeABI(),\n    // };\n    try {\n      // const result = await window.ethereum.request({\n      //   method: \"eth_call\",\n      //   params: [params],\n      // });\n      let result = await info.contract.methods.maxSupply().call();\n      // console.log(info.web3.utils.hexToNumberString(result));\n      setMintInfo((prevState) => ({\n        ...prevState,\n        supply: result,\n      }));\n    } catch (err) {\n      console.log('--------------')\n      setMintInfo((prevState) => ({\n        ...prevState,\n        supply: 0,\n      }));\n    }\n  };\n\n  const getCost = async () => {\n\n    \n    // const params = {\n    //   to: info.contractJSON.address,\n    //   from: info.account,\n    //   data: info.contract.methods.cost().encodeABI(),\n    // };\n    try {\n      // const result = await window.ethereum.request({\n      //   method: \"eth_call\",\n      //   params: [params],\n      // });\n      let result = await info.contract.methods.cost().call();\n      console.log(info.web3.utils.hexToNumberString(result));\n      setMintInfo((prevState) => ({\n        ...prevState,\n        cost: info.web3.utils.hexToNumberString(result),\n      }));\n    } catch (err) {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        cost: \"0\",\n      }));\n    }\n  };\n\n  const mint = async () => {\n    // const params = {\n    //   to: info.contractJSON.address,\n    //   from: info.account,\n    //   value: String(\n    //     info.web3.utils.toHex(Number(mintInfo.cost) * mintInfo.amount)\n    //   ),\n    //   data: info.contract.methods\n    //     .mint(info.account, mintInfo.amount, \"\")\n    //     .encodeABI(),\n    // };\n\n    try {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        loading: true,\n        status: `Minting ${mintInfo.amount}...`,\n      }));\n      // const txHash = await window.ethereum.request({\n      //   method: \"eth_sendTransaction\",\n      //   params: [params],\n      // });\n      await info.contract.methods.mint(info.account, mintInfo.amount, \"\").send({from: info.account});\n      setMintInfo((prevState) => ({\n        ...prevState,\n        loading: false,\n        status:\n          \"Nice! Your NFT will show up on Opensea, once the transaction is successful.\",\n      }));\n      getSupply();\n    } catch (err) {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        loading: false,\n        status: err.message,\n      }));\n    }\n  };\n\n  const updateAmount = (newAmount) => {\n    if (newAmount <= 5 && newAmount >= 1) {\n      setMintInfo((prevState) => ({\n        ...prevState,\n        amount: newAmount,\n      }));\n    }\n  };\n\n  const connectToContract = (_contractJSON) => {\n    init(\"eth_requestAccounts\", _contractJSON);\n  };\n\n  useEffect(() => {\n    connectToContract(contract);\n    initListeners();\n  }, []);\n\n  useEffect(() => {\n    if (info.connected) {\n      getSupply();\n      getCost();\n    }\n  }, [info.connected]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"card\">\n        <div className=\"card_header colorGradient\">\n          <img className=\"card_header_image ns\" alt={\"banner\"} src={Hero} />\n        </div>\n        {mintInfo.supply < contract.total_supply ? (\n          <div className=\"card_body\">\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <button\n                disabled={!info.connected || mintInfo.cost == \"0\"}\n                className=\"small_button\"\n                onClick={() => updateAmount(mintInfo.amount - 1)}\n              >\n                -\n              </button>\n              <div style={{ width: 10 }}></div>\n              <button\n                disabled={!info.connected || mintInfo.cost == \"0\"}\n                className=\"button\"\n                onClick={() => mint()}\n              >\n                Mint {mintInfo.amount}\n              </button>\n              <div style={{ width: 10 }}></div>\n              <button\n                disabled={!info.connected || mintInfo.cost == \"0\"}\n                className=\"small_button\"\n                onClick={() => updateAmount(mintInfo.amount + 1)}\n              >\n                +\n              </button>\n            </div>\n            {info.connected ? (\n              <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n                <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\n                  {info.web3?.utils.fromWei(mintInfo.cost, \"ether\") *\n                    mintInfo.amount}{\" \"}\n                  {contract.chain_symbol}\n                </p>\n                <div style={{ width: 20 }}></div>\n                <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\n                  |\n                </p>\n                <div style={{ width: 20 }}></div>\n                <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\n                  {mintInfo.supply}/{contract.total_supply}\n                </p>\n              </div>\n            ) : null}\n            {mintInfo.status ? (\n              <p className=\"statusText\">{mintInfo.status}</p>\n            ) : null}\n            {info.status ? (\n              <p className=\"statusText\" style={{ color: \"var(--error)\" }}>\n                {info.status}\n              </p>\n            ) : null}\n          </div>\n        ) : (\n          <div className=\"card_body\">\n            <p style={{ color: \"var(--statusText)\", textAlign: \"center\" }}>\n              {mintInfo.supply}/{contract.total_supply}\n            </p>\n            <p className=\"statusText\">\n              We've sold out! .You can still buy and trade the {contract.name}{\" \"}\n              on marketplaces such as Opensea.\n            </p>\n          </div>\n        )}\n        <div className=\"card_footer colorGradient\">\n          <button\n            className=\"button\"\n            style={{\n              backgroundColor: info.connected\n                ? \"var(--success)\"\n                : \"var(--warning)\",\n            }}\n            onClick={() => connectToContract(contract)}\n          >\n            {info.account ? \"Connected\" : \"Connect Wallet\"}\n          </button>\n          {info.connected ? (\n            <span className=\"accountText\">\n              {String(info.account).substring(0, 6) +\n                \"...\" +\n                String(info.account).substring(38)}\n            </span>\n          ) : null}\n        </div>\n        <a\n          style={{\n            position: \"absolute\",\n            bottom: 55,\n            left: -75,\n          }}\n          className=\"_90\"\n          target=\"_blank\"\n          href=\"https://polygonscan.com/token/0x827acb09a2dc20e39c9aad7f7190d9bc53534192\"\n        >\n          View Contract\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Minter;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Minter from \"./components/Minter\";\nimport \"./styles/styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Minter />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}